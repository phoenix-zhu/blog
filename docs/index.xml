<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chAtOPs.in</title>
    <link>https://blog.chatops.in/</link>
    <description>Recent content on chAtOPs.in</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 May 2017 14:07:21 +0800</lastBuildDate>
    
	<atom:link href="https://blog.chatops.in/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于Deployment，Provisioning和Orchestration的区别</title>
      <link>https://blog.chatops.in/post/about-development-provisioning-orchestration/</link>
      <pubDate>Mon, 29 May 2017 14:07:21 +0800</pubDate>
      
      <guid>https://blog.chatops.in/post/about-development-provisioning-orchestration/</guid>
      <description>这几个词并不是什么新鲜词，但我们在读英文文档的时候经常会碰到，它们之间的区别是什么其实也是一直困扰我的一个问题，尤其是 Deployment 和 Provisioning ，我曾经问过一个英语是母语的外国友人这两个之间的区别，他的解释是 Provisioning 是 Deployment 的一部分，不过今天看到一篇Blog(What&amp;rsquo;s Deployment Versus Provisioning Versus Orchestration?)详细的解释了三者之间的区别，就顺便转过来帮助大家理解一下三者的定义。
Deployment 是指把一个全新的或者新版本的应用(Application)安装/更新到一台已经配置好的服务器上。开发人员喜欢使用这个词，而且他们会把前期的配置服务器环境以及安装应用所需的依赖包的过程也认为是 deploy 的环节，也就是说 Deployment 包含了 Provisioning。 Deployment 的时候多使用 Capistrano or Mina。运维人员会用 Provisioning 这个词来表示前期业务环境的准备过程，比如购买服务或者虚拟机，设备的网络接入，系统安装和相关的环境配置等。对于运维人员来讲，Deployment 就是前面狭义上定义的应用安装的过程而已，并不包含 Provisioning。Provisioning 的时候多使用 Chef, Ansible or Puppet。
这么看来，Deployment 和 Provisioning 是母语系国家开发和运维人员因为角色不同对于 基础环境配置 和 部署 概念大小理解上的细微差异而偏好使用的两个词。刚好我问的那位外国友人刚好是一个开发人员，所以也不难理解他为什么解释说 Provisioning 是 Deployment 的一个部分。话说作为一个苦逼的非母语系的运维人员，我个人有限的英语词库里面对于 部署 的理解就是 Deployment，而 基础环境配置 这种事情可能会用 Environment setup 这种直接的表述，这也是我为什么在看到 Provisioning 这个词的时候迷惑的地方了。
最后来说说 Orchestration 这个词，这个词源于交响乐队的乐曲编排，在IT行业中，被用来抽象的描述指以一种规律性运行或者可以自制的东西，更接地气的解释是大规模系统的部署和控制方式。我个人更多的理解为根据系统的特性按照既定的策略安装配置所需的环境。这个词我们看到的基本上都是把它译为 编排 了，也算是比较表意的了。相对而言，不同角色在这个词理解上的差异没有那么大。文章中举了一些例子来帮助理解这个词，顺便摘过来：
 在所有的数据库服务器上运行最新的数据迁移脚本，但不包含应用服务器 在应用服务器上检查当前的软件版本并安装所需的补丁，最后汇报结果 在所有的服务器上使用ps命令检查并确认Daemontools进程在运行 干掉所有的Node.js进程  通常来讲，上面所提及的那些用来做用来做 Deployment 和 Provisioning 的都可以算是 Orchestration 工具，另外还有一些常用的 Orchestration 工具，比如Fabric, MCollective, Salt等也都是可以用来做 Deployment 和 Provisioning 的。</description>
    </item>
    
    <item>
      <title>关于devops的拼写</title>
      <link>https://blog.chatops.in/post/the-name-of-devops/</link>
      <pubDate>Mon, 29 May 2017 03:14:32 +0800</pubDate>
      
      <guid>https://blog.chatops.in/post/the-name-of-devops/</guid>
      <description>在看《Effective DevOps》这本书的时候，前言那里有一段关于devops的拼写的说法。
&amp;quot;Devops&amp;quot;, &amp;quot;devops&amp;quot;, or &amp;quot;DevOps&amp;quot;?
We have had many discussions over the capitalization(or lack thereof) of the term &amp;quot;devops&amp;quot;, A simple online poll showed overwhelming support for &amp;quot;DevOps&amp;quot;. We also found a focus on the &amp;quot;Dev&amp;quot; and &amp;quot;Ops&amp;quot; within organizations, This has lead to the creation of &amp;quot;DevSecOps&amp;quot; and &amp;quot;DevQAOps&amp;quot;, as &amp;quot;DevOps&amp;quot; implies an exclusivity of just &amp;quot;Dev&amp;quot; and &amp;quot;Ops&amp;quot;.
Ultimately, this is why we&#39;ve chosen &amp;quot;devops&amp;quot; - it reflects the original hashtag on Twitter used to connect people who want to help change conversations from *us versus them* to *enabling the business* with sustainable work practices that focus on people.</description>
    </item>
    
    <item>
      <title>一场由BASH的-E参数引发的血案</title>
      <link>https://blog.chatops.in/post/bash-e-flag/</link>
      <pubDate>Mon, 01 Aug 2016 22:56:17 +0800</pubDate>
      
      <guid>https://blog.chatops.in/post/bash-e-flag/</guid>
      <description>最近有一个CI会偶发性的失败，而且频率还挺高，天天看着血色的CI状态面板，真是够够的了。最害怕偶发性的问题了，次次都失败比这个还更能让我更容易接受一些。但不管怎么样，CI总得修啊。和当时写脚本的哥们研究了一下，一致认为问题应该是由nodejs的包没有成功安装导致的。这个脚本是当做docker容器的entrypoint跑的，奇怪的地方在于即使我们在后面有判断如果未能成功安装会再次尝试安装的代码，但是根本不会执行，第一次没有安装成功的话容器直接就退出了。因为每次出问题都是sass没有安装成功退出的，所以心底里一直怀疑是这个包那里有问题，导致了容器直接崩溃退出了。问了周边一些用nodejs的人，都或多或少的遇到安装sass失败的情况，但对于如何提高安装成功率除了重复安装都没有什么好的解决办法。
既然都没有更好的办法，加上原来的代码在第一次失败之后只有一次尝试安装，虽然现实情况来看从来就没有跑到过那里就退出了，但是总是感觉这样不好看，就把这部分重新写了一下，搞了一个不死不休的循环，大概类似如下：
cd /dev/null until [[ $? -eq 0 ]]; do rm -rf node_modules &amp;amp;&amp;amp; npm cache clean &amp;amp;&amp;amp; npm install done  在until之前故意写了的那个cd是为了得到一个非0的返回码确保能进入循环。
把这个跑了一下，发现容器直接在cd /dev/null那里失败之后就退出了，难道bash的任何错误就会直接让容器终止？没有听说过这种事情啊，遍寻各种资料也都没有发现docker有这样的问题和特性。难道是docker镜像的问题？重写了一个简单测试的脚本当做entrypoint开一个容器跑了一下，发现错误之后的代码是能执行下去，并没有让容器退出。那就不是容器的问题，是脚本的问题了，抬头看了一下CI里面的脚本，发现原来脚本的shebang（就是第一行最开始的#!，如有兴趣了解更多请猛击这里）那里给bash的解释器加了一个-e的参数，男人了一下bash，对这个-e的解释如下：
-e Exit immediately if a pipeline (which may consist of a single simple command), a subshell command enclosed in parentheses, or one of the commands executed as part of a command list enclosed by braces (see SHELL GRAMMAR above) exits with a nonzero status. The shell does not exit if the command that fails is part of the command list immediately following a while or until keyword, part of the test following the if or elif reserved words, part of any command executed in a &amp;amp;&amp;amp; or || list except the command following the final &amp;amp;&amp;amp; or ||, any command in a pipeline but the last, or if the command&amp;#39;s return value is being inverted with !</description>
    </item>
    
    <item>
      <title>解决老版本Ruby安装时的openssl问题</title>
      <link>https://blog.chatops.in/post/fix-old-ruby-ssl-issue/</link>
      <pubDate>Fri, 08 Jul 2016 15:56:46 +0800</pubDate>
      
      <guid>https://blog.chatops.in/post/fix-old-ruby-ssl-issue/</guid>
      <description>今天要用一个老的Ruby repo，同步下来发现用的Ruby的版本是1.9.3-p484。安装了ruby之后安装bundler提示如下错误：
/Users/home/.rbenv/versions/1.9.3-p484/lib/ruby/1.9.1/rubygems/remote_fetcher.rb:329:in `rescue in connection_for&amp;#39;: cannot load such file -- openssl (LoadError)  经过一番研究，发现需要在安装的时候指定openssl的路径，在Mac上面找到openssl目录的方法如下：
brew list openssl
输出类似如下：
/usr/local/Cellar/openssl/1.0.2h_1/bin/c_rehash /usr/local/Cellar/openssl/1.0.2h_1/bin/openssl /usr/local/Cellar/openssl/1.0.2h_1/include/openssl/ (75 files) /usr/local/Cellar/openssl/1.0.2h_1/lib/libcrypto.1.0.0.dylib /usr/local/Cellar/openssl/1.0.2h_1/lib/libssl.1.0.0.dylib /usr/local/Cellar/openssl/1.0.2h_1/lib/engines/ (12 files) /usr/local/Cellar/openssl/1.0.2h_1/lib/pkgconfig/ (3 files) /usr/local/Cellar/openssl/1.0.2h_1/lib/ (4 other files) /usr/local/Cellar/openssl/1.0.2h_1/share/man/ (1588 files)  这个/usr/local/Cellar/openssl/1.0.2h_1就是我们要用的目录。
之后就简单了，使用下面的命令重新安装一下Ruby就好了。
RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/Cellar/openssl/1.0.2h_1 rbenv install  </description>
    </item>
    
    <item>
      <title>Hello, world!</title>
      <link>https://blog.chatops.in/post/hello-world/</link>
      <pubDate>Sun, 26 Jun 2016 01:48:56 +0800</pubDate>
      
      <guid>https://blog.chatops.in/post/hello-world/</guid>
      <description>非常技术人员的方式来宣告我在这里的第一篇东西，哈哈。
话说很久很久都没有想过要写Blog这种东西了，以前自己还是挺喜欢把自己的一些想法或者解决过的问题什么的写下来的，但是互联网的兴灭总是出乎你的意料，自己以前所写的东西伴随着个人空间，免费的或者商用的Blog提供者的消亡统统的都成为过眼云烟，慢慢的就没有写下去的念头。后来虽然有twitter和微博的火爆，但发现自己对于这些很容易暴露隐私的东西很难提的起太多的兴趣，也就没有和年轻人去赶时髦玩朋友圈之类的了。现在Github有这样的服务，想着总归不会像以前的那些服务商那么悲催的随随便便的说没有就没有了吧？虽然说Github和我们伟大的GFW有点过节，但是对于数据什么的总归还是相对安全和有保障的吧。
很长时间没有写东西了，发现自己现在都不会写了，先这样吧，且行且写且看。</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://blog.chatops.in/about-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.chatops.in/about-me/</guid>
      <description> Zhu Ye Thoughtworks Senior Consultant
 Devoted in devops &amp;amp; chatops practice. 13 years work experience in OPS field. Extensive knowledge of OPS things. Good at large scale plan, architecture design. Excellent troubleshooting skills.  </description>
    </item>
    
  </channel>
</rss>