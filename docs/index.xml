<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dAmNOps</title>
    <link>https://blog.damnops.com/</link>
    <description>Recent content on dAmNOps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>dAmNOps.com</copyright>
    <lastBuildDate>Mon, 27 Jan 2020 02:45:34 +0800</lastBuildDate>
    
	<atom:link href="https://blog.damnops.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>换个新主题</title>
      <link>https://blog.damnops.com/changed-a-new-theme/</link>
      <pubDate>Mon, 27 Jan 2020 02:45:34 +0800</pubDate>
      
      <guid>https://blog.damnops.com/changed-a-new-theme/</guid>
      <description>本来只想换个主题的，因为域名换了，原来的主题有一些资源不见了，但是发布的时候犯了点小小的错误，在配置文件中把baseURL写成一个http的地址了，导致一些静态资源被浏览器给blocked:mixed-content，gitpages应该也是使用了CDN的，所以首页被缓存了，导致访问到的一直是http的地址，只能试试看重新发布一个页面能不能强制刷一下了。
2019年竟然连一个字都没有写，哈哈。
BTW，愿老天保佑武汉。</description>
    </item>
    
    <item>
      <title>SB阿里云</title>
      <link>https://blog.damnops.com/stupid-aliyun/</link>
      <pubDate>Wed, 18 Jul 2018 11:45:50 +0800</pubDate>
      
      <guid>https://blog.damnops.com/stupid-aliyun/</guid>
      <description>就是一个无聊的无脑发泄而已，其实我真的不想这样的，但是真的不怕人比人，就怕货比货。虽然说他家经过多年奋斗，终于在今年好不容易被收入 高德纳魔力象限，并挤进了Visionaries。是件高兴的事情没错，但是在国际化的同时，以前那种强盗方式的做事思路是不是得改改啊？
其实也没有什么大事，就是混互联网的日子长了，会在各种平台上注册账号。然后呢，估计大家也清楚，这些平台呢都会推送一些什么乱七八糟的信息给你，虽然我已经很小心的有一个专门用来干这个事情的邮箱。但是有一些时候还是会用常用的邮箱来注册的。这不最近发现常用的那个邮箱收到的这种邮件有点多么，实在是很烦啊，就在看到类似的邮件的时候去做取消订阅这件事情，一般来说，点了链接后会跳到一个页面告诉你取消成功了，稍微烦一点的也就是给一个确认页面，问你是否确认要取消，或者说是只取消某一些类型的消息。但不管怎么样，其他的网站都表现的很友好，点选确定就是了。唯独这个阿里云啊，非要登录！你咋不上天呢。就这流氓作风，老实说，我在选择的时候都会退避三舍的。</description>
    </item>
    
    <item>
      <title>使用AWS给GitHub Blog加上HTTPS</title>
      <link>https://blog.damnops.com/https-for-your-github-blog/</link>
      <pubDate>Sat, 08 Jul 2017 21:28:53 +0800</pubDate>
      
      <guid>https://blog.damnops.com/https-for-your-github-blog/</guid>
      <description>现在GitHub已经使用Let&#39;s Encrypt自动签发证书了，所以下面这个浪费时间的东西当做兴趣看看就行了。
====================
虽然用GitHub当做自己的Blog也没有写几篇内容，但没事了折腾一下Theme（虽然很丑，我是当不了一个好的前端了），留言（虽然到目前为止也没有什么人留言，#_#!）啊什么的还是挺爽的。今天突然难耐不住，想给它加上HTTPS，大家伙都知道，GitHub因为种种原因，不是很方便的能提供这样的服务。
要干这样的事情，唯一能走的路子就是在前面再加上一层代理了，刚开始考虑使用AWS ALB的，因为据说它后端可以支持外部资源了，但是大概瞄了一下，发现这个基本上算是一个误传，目前来说，还是只能支持VPC内的Instance或者私网IP。嗯，私网IP。
好吧，次优方案就是CloudFront了，闲话少说。因为想继续使用blog.damnops.com作为访问入口的，所以第一件事情就是准备一个origin的域名，登录去他爹(godaddy)的网站新增一条CNAME记录到我的github的地址，另外记得更新GitHub中的CNAME文件到这个新的域名上。第二件事情就是到ACM申请一个证书了，这个没有什么难度，照着流程走。这个过程中有个地方把自己小坑了一把，因为使用了域名验证，AWS提供的文档中是全域名的，没有多想就贴到去他爹的表单中，结果等了好一会也没有通过，自己本地解析也是失败的，才想起来去他爹那里是不需要自己的Apex那部分的。真的是去他爹的坑爹啊。
接下来就是去配置一个CloudFront节点了，在Origin那里输入上面准备的新的origin的域名，选择使用自定义的证书(Custom SSL Certificate)，贴上上一步在ACM中申请的证书的ARN就可以了，另外在访问者策略(Viewer Protocol Policy)那里选上转发HTTP到HTTPS(Redirect HTTP to HTTPS)，其他大部分的地方保持默认，诸如什么安全策略的版本，支持的HTTP的版本，部署的范围之类的，随个人爱好和经济情况定了。这里唯一要说一下的是这玩意的部署和更新真的很慢，需要极大的耐心。
在CloudFront部署完成后，当你能正常解析CloudFront的域名之后(类似于d3bmkjusa7yq2q.cloudfront.net这样的)，就需要到去他爹那里把入口的域名更新到这里了，等域名更新完成之后，再次访问一下，抬头看看地址栏是不是有小绿锁了。如果是的，那恭喜你。如果不是，嗯~回头再去想一想是不是哪一步忘了点什么，祝你好运。
在更新域名的过程中，发现去他爹现在提供了对Apex记录的Forwarding功能，所以我把自己的转发到Blog上面了，oh~yeah。</description>
    </item>
    
    <item>
      <title>Git学习网站</title>
      <link>https://blog.damnops.com/learn-git/</link>
      <pubDate>Wed, 31 May 2017 16:53:02 +0800</pubDate>
      
      <guid>https://blog.damnops.com/learn-git/</guid>
      <description>以前一个同事推荐的学习git的，基础性的操作和知识点都包含了。
http://learngitbranching.js.org/</description>
    </item>
    
    <item>
      <title>自动化工具集合</title>
      <link>https://blog.damnops.com/best-cloud-tools-for-infrastructure-automation/</link>
      <pubDate>Tue, 30 May 2017 01:50:49 +0800</pubDate>
      
      <guid>https://blog.damnops.com/best-cloud-tools-for-infrastructure-automation/</guid>
      <description>瞎逛看到这个非常全面的自动化工具集，按照字母顺序排列，原文请见Best Cloud Tools for Infrastructure Automation
There are two main reasons for infrastructure automation. First, system administrators, IT professionals and DevOps engineers need to automate as many routine tasks as possible. That&#39;s why we build tools at Stackify to help developers automate processes like application performance management, error monitoring, and log management; automation means you have more time for mission-critical tasks. Second, automation makes the management of complex, diverse environments possible and allows rapid scaling.</description>
    </item>
    
    <item>
      <title>关于Deployment，Provisioning和Orchestration的区别</title>
      <link>https://blog.damnops.com/about-development-provisioning-orchestration/</link>
      <pubDate>Mon, 29 May 2017 14:07:21 +0800</pubDate>
      
      <guid>https://blog.damnops.com/about-development-provisioning-orchestration/</guid>
      <description>这几个词并不是什么新鲜词，但我们在读英文文档的时候经常会碰到，它们之间的区别是什么其实也是一直困扰我的一个问题，尤其是 Deployment 和 Provisioning ，我曾经问过一个英语是母语的外国友人这两个之间的区别，他的解释是 Provisioning 是 Deployment 的一部分，不过今天看到一篇Blog(What&#39;s Deployment Versus Provisioning Versus Orchestration?)详细的解释了三者之间的区别，就顺便转过来帮助大家理解一下三者的定义。
Deployment 是指把一个全新的或者新版本的应用(Application)安装/更新到一台已经配置好的服务器上。开发人员喜欢使用这个词，而且他们会把前期的配置服务器环境以及安装应用所需的依赖包的过程也认为是 deploy 的环节，也就是说 Deployment 包含了 Provisioning。 Deployment 的时候多使用 Capistrano or Mina。运维人员会用 Provisioning 这个词来表示前期业务环境的准备过程，比如购买服务或者虚拟机，设备的网络接入，系统安装和相关的环境配置等。对于运维人员来讲，Deployment 就是前面狭义上定义的应用安装的过程而已，并不包含 Provisioning。Provisioning 的时候多使用 Chef, Ansible or Puppet。
这么看来，Deployment 和 Provisioning 是母语系国家开发和运维人员因为角色不同对于 基础环境配置 和 部署 概念大小理解上的细微差异而偏好使用的两个词。刚好我问的那位外国友人刚好是一个开发人员，所以也不难理解他为什么解释说 Provisioning 是 Deployment 的一个部分。话说作为一个苦逼的非母语系的运维人员，我个人有限的英语词库里面对于 部署 的理解就是 Deployment，而 基础环境配置 这种事情可能会用 Environment setup 这种直接的表述，这也是我为什么在看到 Provisioning 这个词的时候迷惑的地方了。
最后来说说 Orchestration 这个词，这个词源于交响乐队的乐曲编排，在IT行业中，被用来抽象的描述指以一种规律性运行或者可以自制的东西，更接地气的解释是大规模系统的部署和控制方式。我个人更多的理解为根据系统的特性按照既定的策略安装配置所需的环境。这个词我们看到的基本上都是把它译为 编排 了，也算是比较表意的了。相对而言，不同角色在这个词理解上的差异没有那么大。文章中举了一些例子来帮助理解这个词，顺便摘过来：
 在所有的数据库服务器上运行最新的数据迁移脚本，但不包含应用服务器 在应用服务器上检查当前的软件版本并安装所需的补丁，最后汇报结果 在所有的服务器上使用ps命令检查并确认Daemontools进程在运行 干掉所有的Node.js进程  通常来讲，上面所提及的那些用来做用来做 Deployment 和 Provisioning 的都可以算是 Orchestration 工具，另外还有一些常用的 Orchestration 工具，比如Fabric, MCollective, Salt等也都是可以用来做 Deployment 和 Provisioning 的。</description>
    </item>
    
    <item>
      <title>关于devops的拼写</title>
      <link>https://blog.damnops.com/the-name-of-devops/</link>
      <pubDate>Mon, 29 May 2017 03:14:32 +0800</pubDate>
      
      <guid>https://blog.damnops.com/the-name-of-devops/</guid>
      <description>在看《Effective DevOps》这本书的时候，前言那里有一段关于devops的拼写的说法。
&amp;quot;Devops&amp;quot;, &amp;quot;devops&amp;quot;, or &amp;quot;DevOps&amp;quot;?
We have had many discussions over the capitalization(or lack thereof) of the term &amp;quot;devops&amp;quot;, A simple online poll showed overwhelming support for &amp;quot;DevOps&amp;quot;. We also found a focus on the &amp;quot;Dev&amp;quot; and &amp;quot;Ops&amp;quot; within organizations, This has lead to the creation of &amp;quot;DevSecOps&amp;quot; and &amp;quot;DevQAOps&amp;quot;, as &amp;quot;DevOps&amp;quot; implies an exclusivity of just &amp;quot;Dev&amp;quot; and &amp;quot;Ops&amp;quot;.
Ultimately, this is why we&#39;ve chosen &amp;quot;devops&amp;quot; - it reflects the original hashtag on Twitter used to connect people who want to help change conversations from *us versus them* to *enabling the business* with sustainable work practices that focus on people.</description>
    </item>
    
    <item>
      <title>解决老版本Ruby安装时的openssl问题</title>
      <link>https://blog.damnops.com/fix-old-ruby-ssl-issue/</link>
      <pubDate>Fri, 08 Jul 2016 15:56:46 +0800</pubDate>
      
      <guid>https://blog.damnops.com/fix-old-ruby-ssl-issue/</guid>
      <description>今天要用一个老的Ruby repo，同步下来发现用的Ruby的版本是1.9.3-p484。安装了ruby之后安装bundler提示如下错误：
/Users/home/.rbenv/versions/1.9.3-p484/lib/ruby/1.9.1/rubygems/remote_fetcher.rb:329:in `rescue in connection_for&amp;#39;: cannot load such file -- openssl (LoadError) 经过一番研究，发现需要在安装的时候指定openssl的路径，在Mac上面找到openssl目录的方法如下：
brew list openssl
输出类似如下：
/usr/local/Cellar/openssl/1.0.2h_1/bin/c_rehash /usr/local/Cellar/openssl/1.0.2h_1/bin/openssl /usr/local/Cellar/openssl/1.0.2h_1/include/openssl/ (75 files) /usr/local/Cellar/openssl/1.0.2h_1/lib/libcrypto.1.0.0.dylib /usr/local/Cellar/openssl/1.0.2h_1/lib/libssl.1.0.0.dylib /usr/local/Cellar/openssl/1.0.2h_1/lib/engines/ (12 files) /usr/local/Cellar/openssl/1.0.2h_1/lib/pkgconfig/ (3 files) /usr/local/Cellar/openssl/1.0.2h_1/lib/ (4 other files) /usr/local/Cellar/openssl/1.0.2h_1/share/man/ (1588 files) 这个/usr/local/Cellar/openssl/1.0.2h_1就是我们要用的目录。
之后就简单了，使用下面的命令重新安装一下Ruby就好了。
RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/Cellar/openssl/1.0.2h_1 rbenv install </description>
    </item>
    
    <item>
      <title>Hello, world!</title>
      <link>https://blog.damnops.com/hello-world/</link>
      <pubDate>Sun, 26 Jun 2016 01:48:56 +0800</pubDate>
      
      <guid>https://blog.damnops.com/hello-world/</guid>
      <description>非常技术人员的方式来宣告我在这里的第一篇东西，哈哈。
话说很久很久都没有想过要写Blog这种东西了，以前自己还是挺喜欢把自己的一些想法或者解决过的问题什么的写下来的，但是互联网的兴灭总是出乎你的意料，自己以前所写的东西伴随着个人空间，免费的或者商用的Blog提供者的消亡统统的都成为过眼云烟，慢慢的就没有写下去的念头。后来虽然有twitter和微博的火爆，但发现自己对于这些很容易暴露隐私的东西很难提的起太多的兴趣，也就没有和年轻人去赶时髦玩朋友圈之类的了。现在Github有这样的服务，想着总归不会像以前的那些服务商那么悲催的随随便便的说没有就没有了吧？虽然说Github和我们伟大的GFW有点过节，但是对于数据什么的总归还是相对安全和有保障的吧。
很长时间没有写东西了，发现自己现在都不会写了，先这样吧，且行且写且看。</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://blog.damnops.com/about-me/</link>
      <pubDate>Fri, 29 May 2015 14:07:21 +0800</pubDate>
      
      <guid>https://blog.damnops.com/about-me/</guid>
      <description>Zhu Ye Thoughtworks Senior Consultant
 Focused on cloud native tech. Devoted in devops &amp;amp; SRE practice. 15+ years work experience in OPS field. Extensive knowledge of OPS things. Good at large scale plan, architecture design. Excellent troubleshooting skills.  </description>
    </item>
    
  </channel>
</rss>